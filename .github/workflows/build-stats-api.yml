name: Build and push stats-api

run-name: "${{ github.ref_name }} - ${{ inputs.custom_sha || github.sha }}"

on:
  push:
    paths:
      - "stats-api/**"
  pull_request:
    paths:
      - "stats-api/**"
  workflow_dispatch:
    inputs:
      custom_sha:
        description: 'Custom SHA (image rebuilds only)'
        required: false
        type: string

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  DOCKERFILE: "Dockerfile.api"
  IMAGE_NAME: "stats-api"
  PORT: "8080"
  TARGET: "runtime"
  DEPLOY_WORKFLOW: "deploy-stats-api.yml"

jobs:
  format-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3

      - name: Check version
        run: terraform --version

      - name: Format check
        run: terraform fmt -check

  build-push:
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.custom_sha || github.sha }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ vars.PROVIDER_NAME }}
          service_account: ${{ vars.SERVICE_ACCOUNT }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v3

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build image, caching from latest
        run: |
          docker pull gcr.io/${{ vars.GCP_PROJECT_ID }}/${IMAGE_NAME}:latest

          docker build --target ${TARGET} --build-arg PORT=${PORT} -f ${DOCKERFILE} \
          --cache-from gcr.io/${{ vars.GCP_PROJECT_ID }}/${IMAGE_NAME}:latest \
          -t gcr.io/${{ vars.GCP_PROJECT_ID }}/${IMAGE_NAME}:${{ inputs.custom_sha || github.sha }} \
          ${{ github.ref_name == 'main' && format('-t gcr.io/{0}/{1}:latest', vars.GCP_PROJECT_ID, env.IMAGE_NAME) || '' }} .

      - name: Push image
        run: docker push --all-tags gcr.io/${{ vars.GCP_PROJECT_ID }}/${IMAGE_NAME}

  deploy:
    runs-on: ubuntu-latest
    needs: build-push

    steps:
      - name: Check Environment
        id: check_env
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            # For main branch, deploy to multiple environments
            echo "envs=development" >> $GITHUB_OUTPUT
            echo "image_tag=latest" >> $GITHUB_OUTPUT
            echo "Deploying to multiple environments with latest tag"
          else
            eph_env="${{ github.repository_name }}-${{ github.ref_name }}"
            echo "Checking for GCP project: $eph_env"
            
            # Check if GCP project exists
            if gcloud projects describe "$eph_env" --quiet 2>/dev/null; then
              echo "envs=$eph_env" >> $GITHUB_OUTPUT
              echo "image_tag=${{ inputs.image_tag }}" >> $GITHUB_OUTPUT
              echo "Ephemeral environment found: $eph_env"

              # if we are in a branch build, but a "PR to main" exists then we should exit, 
              # as we want to give PR builds preference
              pr_exists=$(gh pr list --head "${{ github.ref_name }}" --base main --state open --json number --jq length)
              if [ "$pr_exists" -gt 0 ]; then
                echo "PR to main exists, exiting"
                exit 0
              fi

            else
              echo "envs=" >> $GITHUB_OUTPUT
              echo "image_tag=" >> $GITHUB_OUTPUT
              echo "No ephemeral environment found for: $eph_env"
              exit 0
            fi
          fi

      - name: Trigger Concurrent Deployments
        if: steps.check_env.outputs.envs != ''
        run: |
          IFS=',' read -ra ENVS <<< "${{ steps.check_env.outputs.envs }}"
          for env in "${ENVS[@]}"; do
            echo "Triggering deployment to: $env"
            gh workflow run ${{ inputs.deploy_workflow }} \
              --ref ${{ github.ref }} \
              -f env="$env" \
              -f image_tag="${{ steps.check_env.outputs.image_tag }}"
          done