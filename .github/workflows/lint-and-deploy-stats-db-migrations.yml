name: CICD for stats-db migrations

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/ci-stats-db.yaml
      - "stats-db/migrations/**"
  pull_request:
    branches: [ main ]
    paths:
      - .github/workflows/ci-stats-db.yaml
      - "stats-entities/**"
  workflow_dispatch:
    inputs:
      env:
        description: "Environment"
        required: true
        type: choice
        options:
          - "development"
          - "production"

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  check-diff:
    # validate ORM entities against migrations
    # exit if changes exist which are not in migrations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "stats-db/pyproject.toml"

      - name: Set up uv
        uses: astral-sh/setup-uv@v6

      - name: Install the project
        run: uv sync --directory stats-db --locked

      - name: Set up Atlas
        uses: ariga/setup-atlas@v0

      - name: Diff migrations
        id: diff
        run: |
          uv run --directory stats-db atlas migrate diff --env sqlalchemy
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Fail if diff
        if: ${{ steps.diff.outputs.changed == 'true' }}
        run: |
          echo "::error title=Migration Check Failed::Please run 'atlas migrate diff' and commit the changes."
          exit 1

  lint:
    # validate migrations against a clean database
    # use docker mysql image
    # error if migrations cannot be deployed safely
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'development' }}
    needs: check-diff

    services:
      mysql:
        image: mysql:8.4
        env:
          MYSQL_DATABASE: dev
          MYSQL_ROOT_PASSWORD: pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -ppass"
          --health-interval 10s
          --health-start-period 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Inspect environment
        run: |
          echo "Environment: ${{ inputs.environment || 'development' }}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "stats-db/pyproject.toml"

      - name: Set up uv
        uses: astral-sh/setup-uv@v6

      - name: Install the project
        run: uv sync --directory stats-db --locked

      - name: Set up Atlas
        uses: ariga/setup-atlas@v0

      - name: Wait for mysql service to be ready
        # the action automatically waits for the health check to pass,
        # but a brief sleep is still helpful
        run: sleep 10 

      - name: Lint migrations
        run: |
          DB_URL="mysql://root:pass@mysql:3306/dev
          atlas migrate lint --dir file://stats-db/migrations --dev-url $DB_URL --git-base main

  deploy:
    # deploy migrations to database
    # connect via cloud sql proxy
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'development' }}
    if: github.ref == 'refs/heads/main'
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Inspect environment
        run: |
          echo "Environment: ${{ inputs.environment || 'development' }}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "stats-db/pyproject.toml"

      - name: Set up uv
        uses: astral-sh/setup-uv@v6

      - name: Install the project
        run: uv sync --directory stats-db --locked

      - name: Set up Atlas
        uses: ariga/setup-atlas@v0

      - name: Authenticate to Google Cloud
        id: "auth"
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ vars.PROVIDER_NAME }}
          service_account: ${{ vars.SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3

      - name: Get secrets
        id: "gcp_secrets"
        uses: google-github-actions/get-secretmanager-secrets@v3
        with:
          secrets: |-
            STATS_DB_PW:projects/${{ vars.GCP_PROJECT_ID }}/secrets/${{ vars.STATS_DB_PW_SECRET_NAME }}/versions/latest

      - name: Download Cloud SQL proxy
        run: |
          curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.7.0/cloud-sql-proxy.linux.amd64
          chmod +x cloud-sql-proxy

      - name: Download wait-for-it.sh
        run: |
          # Download the script and make it executable
          curl -sS -o wait-for-it.sh https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh
          chmod +x wait-for-it.sh

      - name: Start Cloud SQL proxy
        run: |
          nohup ./cloud-sql-proxy ${{ vars.STATS_DB_INSTANCE }} --port 3306 > cloud-sql-proxy.out 2> cloud-sql-proxy.err < /dev/null &
          echo "CLOUD_SQL_PROXY_PID=$!" >> $GITHUB_ENV

      - name: Wait for Cloud SQL Proxy to Start
        run: |
          # Wait up to 30 seconds for the Cloud SQL Proxy to become available on port 3306
          ./wait-for-it.sh localhost:3306 --timeout=30 --strict -- echo "Cloud SQL Proxy is ready."

      - name: Deploy migrations
        run: |
          DB_URL="mysql://${{ vars.STATS_DB_USER }}:${{ steps.gcp_secrets.outputs.STATS_DB_PW }}@localhost:3306/${{ vars.STATS_DB_NAME }}"
          atlas migrate apply --dry-run --dir file://stats-db/migrations --url $DB_URL
          atlas migrate apply --dir file://stats-db/migrations --url $DB_URL

      - name: Stop Cloud SQL Proxy
        if: always()
        run: |
          kill ${{ env.CLOUD_SQL_PROXY_PID }}
