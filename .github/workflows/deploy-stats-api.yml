name: Deploy stats-api

# Set custom run name to show project name in workflow runs list
run-name: "Deploy API - ${{ github.event.inputs.env }} - ${{ github.event.inputs.image_tag || github.sha }}"

on:
  push:
    branches:
      - main
    paths:
      - "stats-api/**"
      - "terraform/stats_api/**"
  pull_request:
    branches:
      - main
    paths:
      - "stats-api/**"
      - "terraform/stats_api/**"
  workflow_dispatch:
    inputs:
      env:
        description: "Environment"
        required: true
        type: string
        default: ""
      image_tag:
        description: "Docker image tag (latest or the commit SHA)"
        required: false
        type: string
        default: "latest"

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  DOCKERFILE: "Dockerfile.api"
  IMAGE_NAME: "stats-api"
  PORT: "8080"
  TARGET: "runtime"

jobs:
  format-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3

      - name: Check version
        run: terraform --version

      - name: Format check
        run: terraform fmt -check

  deploy:
    runs-on: ubuntu-latest
    needs: format-check
    environment: ${{ inputs.env }}
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          # Determine environment from inputs or GitHub environment
          if [ -n "${{ inputs.env }}" ]; then
            ENV_NAME="${{ inputs.env }}"
          else
            echo "Error: No environment specified"
            exit 1
          fi
          
          REGION="${{ vars.GCP_REGION || 'us-central1' }}"
          echo "ENVIRONMENT=$ENV_NAME" >> $GITHUB_ENV
          echo "REGION=$REGION" >> $GITHUB_ENV

          # Set project name and terraform bucket based on environment
          if [ "$ENV_NAME" = "production" ]; then
            echo "PROJECT_NAME=arxiv-production" >> $GITHUB_ENV
            echo "TERRAFORM_BUCKET=prod-arxiv-terraform-state" >> $GITHUB_ENV
            TERRAFORM_ARGS="-var-file=envs/prod.tfvars"
          elif [ "$ENV_NAME" = "development" ]; then
            echo "PROJECT_NAME=arxiv-development" >> $GITHUB_ENV
            echo "TERRAFORM_BUCKET=dev-arxiv-terraform-state" >> $GITHUB_ENV
            TERRAFORM_ARGS="-var-file=envs/dev.tfvars"
          else
            # For custom environments, use the environment name as project name
            echo "PROJECT_NAME=$ENV_NAME" >> $GITHUB_ENV
            echo "TERRAFORM_BUCKET=$ENV_NAME-arxiv-terraform-state" >> $GITHUB_ENV
            TERRAFORM_ARGS="-var-file=envs/dev.tfvars
              -var=\"gcp_project_id=$ENV_NAME\" \
              -var=\"gcp_region=$REGION\""
          fi

          # Add image_path to TERRAFORM_ARGS for all environments
          TERRAFORM_ARGS="$TERRAFORM_ARGS \
            -var=\"image_path=gcr.io/arxiv-development/${{env.IMAGE_NAME}}:${{ inputs.image_tag || github.sha }}\""

          echo "TERRAFORM_ARGS=$TERRAFORM_ARGS" >> $GITHUB_ENV

      - name: Authenticate with project-specific Workload Identity
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ vars.PROVIDER_NAME }}
          service_account: ${{ vars.SERVICE_ACCOUNT }}

      # - name: Authenticate with project-specific Workload Identity
      #   uses: google-github-actions/auth@v3
      #   with:
      #     workload_identity_provider: ${{ env.PROVIDER_NAME }}
      #     service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v3

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3

      - name: Check version
        run: terraform --version

      - name: Initialize remote backend
        run: terraform init -backend-config="bucket=${{ env.TERRAFORM_BUCKET }}"
        working-directory: terraform/stats_api

      - name: Apply
        run: |
          echo "Running terraform apply..."
          terraform apply ${{ env.TERRAFORM_ARGS }} \
            -auto-approve
        working-directory: terraform/stats_api